setwd("~/Desktop/Analysis_Projects/R_Analysis")
setwd("~/Desktop/Analysis_Projects/R_Analysis/01_Demo")
x <- 3
# Create a numeric vector, similar to an array, with the c() function. This is short for concatenate
numlist <- c(0,1,2,3,4,5,6,7,8,9)
?read.csv()
# the result is in the env pane. The [1:10] refers to one row and ten columns.
#Functions syntax is:
# function_name <- function(arg1, arg2=T, ...){
# <Body of the Function>
#return <return value>
#}
demo_table <- read.csv(file='demo.csv', check.names = F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
# Import a JSON file
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
# Selecting and Subsetting data. Index starts at 1
#For a 1-D vector
X[3]
# Selecting and Subsetting data. Index starts at 1
#For a 1-D vector
x[3]
#For a 2-D data structure ie. matricies, dataframes, tibbles [row,column]
demo_table[3,"Year"]
# This does the same thing
demo_table[3,3]
# This $ is used to select columns as a single vector
demo_table$Vehicle_Class
#Furthermore, use bracket notation to select a single value
demo_table$Vehicle_Class[2]
#Filtering data with bracket notation -filter demo_table2 to have only rows where
#vehicle price is greater than 10K
filter_table <- demo_table2[demo_table2$price>10000,]
View(filter_table)
?subset()
#Filter with subset()
filter_table2 <- subset(demo_table2, price>10000 & drive =="4wd", & "clean" %in% title_status)
#Filter with subset()
filter_table2 <- subset(demo_table2, price>10000 & drive =="4wd" & "clean" %in% title_status)
View(filter_table2)
?sample()
#select randomly from dataset with sample().
# For 1-D vector
sample(c("cow","deer","pig","chicken","ducks","sheep","dog"),4)
#select randomly from dataset with sample().
# For 1-D vector
sample(c("cow","deer","pig","chicken","ducks","sheep","dog"),4)
#For 2-D random selection supply the index of each row to be sampled from
#1-create a vecto that's same num of rows in the dataFrame using the (:) operator
#2-Use sample() to sample list of indices from the vector we just made
#3-Use bracket notation to retrieve data from random rows from the sample list
# To include all three steps into one statement, it looks like:
demo_table[sample(1:nrow(demo_table), 3),]
?mutate()
library(tidyverse)
?mutate()
#In tidyverse, we can use dplyr, which has the mutate() function. THis is used to
#transform a dataframe and create new calculated data columns
#Adding mileage_per_year column and labeling all Vehicles as active
demo_table <- demo_table %>% mutate(Mileage_Per_Year=Totale_Miles/(2020-Year),IsActive=True)
#In tidyverse, we can use dplyr, which has the mutate() function. THis is used to
#transform a dataframe and create new calculated data columns
#Adding mileage_per_year column and labeling all Vehicles as active
demo_table <- demo_table %>% mutate(Mileage_Per_Year=Total_Miles/(2020-Year),IsActive=True)
#In tidyverse, we can use dplyr, which has the mutate() function. THis is used to
#transform a dataframe and create new calculated data columns
#Adding mileage_per_year column and labeling all Vehicles as active
demo_table <- demo_table %>% mutate(Mileage_Per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
#Grouping and summarizing dataframes. WHen we use group_by(), we use summarize() to create columns
#in our summary dataframe-Group used cars by condition and determine the avg mileager per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer))
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Max_Price=max(price),Num_Vehicles=n())
View(summarize_demo)
?gather()
#Import wide dataset
demo_table3 <- read.csv(file='demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
#Reshape demo_table3 from wide format with gather()
long_table <- gather(demo_table3,key='Metric',value = 'Score', buying_price:popularity)
View(long_table)
# This is another way to write that same line
long_table <- demo_table3 %>% gather(key='Metric',value='Score',buying_price:popularity)
?spread()
#spread() will make a DF wider
wide_table >- long_table %>% spread(key='Metric',value='Score')
#spread() will make a DF wider
wide_table <- long_table %>% spread(key='Metric',value='Score')
View(wide_table)
#check if wide_format is the same as the original demo_table 3, used all.equal()
all.equal(demo_table3,wide_table)
View(wide_table)
?ggplot()
head(mpg)
#Using built in mpg dataset to plot with ggplot2
#Plot categorical data with bar plot
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
?geom_bar()
#bar plots- used to compare and contrast categorical results
#compare num of vehicles per manufacturer, use summarize() and geom_col
mpg_summarize <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n())
#2-import dataset into ggplot2
plt <- ggplot(mpg_summarize,aes(x=manufacturer, y=Vehicle_Count))
#3- plot the bar plot
plt + geom_plot()
#3- plot the bar plot
plt + geom_col()
#Formatting graphs used xlab() and ylab() to change titles
plt + geom_col + xlab("Manufacturing Company" + ylab("Number of Vehicles"))
#Formatting graphs used xlab() and ylab() to change titles
plt + geom_col + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#Formatting graphs used xlab() and ylab() to change titles
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#Rotate x-axis 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x = element_text(angle=45,hjust=1))
View(mpg_summarize)
#Line plot compare continuous (y) and categoriacal(x) data
#Compare diff in avg highway economy of Toyotas as a function of diff cyl sizes
#Create summary table
mpg_summary <- subset(mpg,manufacturer=="Toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
View(plt)
View(mpg_summary)
plt + geom_line()
View(mpg_summarize)
View(mpg_summary)
head(mpg)
view(mpg_summary)
#Line plot compare continuous (y) and categoriacal(x) data
#Compare diff in avg highway economy of Toyotas as a function of diff cyl sizes
#Create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt+geom_line()
#Fix axis values with scale_x_discrete() and scale_y_continuous()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel Efficiency")
plt <- ggplot(mpg, aes(x=displ, y=cty))
plt + geom_point() + xlab("Engine Size") + ylab("City Fuel Efficiency")
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class))
plt + geom_point() + xlab("Engine Size") + ylab("City Fuel Efficiency")
plt + geom_point() + labs(x="Engine Size",y="City Fuel Efficiency",color="Vehicle Class")
plt + geom_point() + labs(x="Engine Size",y="City Fuel Efficiency",color="Vehicle Class", shape="Type of Drive")
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class, shape=drv))
plt + geom_point() + labs(x="Engine Size",y="City Fuel Efficiency",color="Vehicle Class", shape="Type of Drive")
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot()
head(mtcars)
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test()

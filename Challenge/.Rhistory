install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/Desktop/Analysis_Projects/R_Analysis")
setwd("~/Desktop/Analysis_Projects/R_Analysis/01_Demo")
X <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv()
demo_table <- read.csv(file='demo.csv', check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='R_Analysis/demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
library(jsonlite)
View(demo_table)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
demo_table[3,"year"]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[1]
filter_table <- demo_table2$[demo_table2$price > 1000]
filter_table <- demo_table2[demo_table2$price > 1000]
filter_table <- demo_table2[demo_table2$price > 1000,]
View(filter_table)
View(filter_table)
View(demo_table2)
?subset()
filter_table2 <- subset(demo_table2, price>10000 & drive=="4wd" & "clean"%in% title_status) #filter by prive and drivetrain
View(filter_table2)
?sample()
demo_table[sample(1:nrow(demo_table), 3)]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #Add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer)) #Create a summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n()) #Create a summary table with multiple columns
View(summarize_demo)
?gather()
demo_table3 <- read.csv('demo2.csv',check.names=F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key='Metric',value='Score',buying_price:popularity)
View(long_table)
View(long_table)
long_table <- demo_table3 %>% gather(key='Metric', value='Score', buying_price:popularity)
View(long_table)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
?ggplot()
head(mpg)
plt <- ggplot(mpg, aes(x=class)) # import dataset into ggplot
plt + geo_bar() # Plot a bar plot
plt + geom_bar()
?geom_bar()
mpg_summary <- mpg %>% group_by(manifacturer) %>% summarize(Vehihicle_Count=n()) # Create a summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehihicle_Count=n()) # Create a summary table
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #Import dataset into ggplot2
plt + geom_col() #Plot the bar plot
View(mpg_summary)
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehihicle_Count)) #Import dataset into ggplot2
plt + geom_col() #Plot the bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #Plot bar
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate x axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labelstheme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
exit()
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate x axis label 45 degrees
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate x axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
plt +geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks=c(15:30))
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt <- ggplot(mpg,aes(x=disp,y=cty))
plt + geom_plt() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
View(mpg_summary)
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)",color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)",color="Vehicle Class", shape="Type of Drive")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv, size=mpg))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)",color="Vehicle Class", shape="Type of Drive",size="MPG")
plt <- ggplot(mpg,aes(y-hwy))
plt + geom_boxplot() +
exit
plt + geom_boxplot()
plt <- ggplot(mpg,aes(y-hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer, y=hwy))
plt + geom_plot() + theme(axis.text.x=element_text(angle=45,hjust = 1))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust = 1))
mpg_summary <- mpg %>% group_by(class, year) %>% summarize(Mean_Hwy(hwy)) # create a summary table
mpg_summary <- mpg %>% group_by(class, year) %>% summarise(Mean_Hwy(hwy)) # create a summary table
rlang::last_error()
mpg_summary <- mpg %>% group_by(class, year) %>% summarize(Mean_Hwy=mean(hwy)) # create a summary table
plt <- ggplot(mpg_summary,aes(x=class, y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year",fill="Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model, year) %>% summarize(Mean_Hwy=mean(hwy)) # create a summary table
plt <- ggplot(mpg_summary,aes(x=model, y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model", y="Vehicle Year",fill="Mean Highway (MPG)")
plt + geom_tile() + labs(x="Model", y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.yexy.x=element_text(angle=90,hjust=1,vjust=.5))
plt + geom_tile() + labs(x="Model", y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer, y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ)) # create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) # import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size") # add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ,SD_Engine=sd(displ))) # create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) # import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean-Engine+SD_Engine))# add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))) # create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
plt <- ggplot(mpg_summary,aes(x=class, y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro_test()
?shapiro.test()
shapiro.test(x=wt)
shapiro.test(mtcars$wt)
?sample_n()
head(used_car_data)
population_table <- read.csv('used_car_data.csv', check.names = F,stringsAsFactors=F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_desnity()
plt + geom_density()
View(population_table)
?t.test()
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
View(population_table)
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven))
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data $>$ filter(year==1999)
mpg_1999 <- mpg_data $>$ filter(year==1999)
mpg_1999 <- mpg_data $>$ filter(year=1999)
mpg_1999 <- mpg_data $>$ filter(year==1999)
mpg_1999 <- mpg_data $>$ filter(year===1999)
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired=T)
?aov()
mtcars_filt <- mtcars[,c("hp","cy")]
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl), data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary(aov(hp ~ cyl, data=mtcars_filt)
summary)aov(hp~cyl,data=mtcars_filt)
summary(aov(hp~cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
cor(mtcars$hp,mtcars$qsec)
used_cars <- read.csv('used_car_data.csv')
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_poit()
plt + geom_point()
cor(used_cars$Miles_Driven,used_cars$Seller_Price)
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars)
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec~hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept']
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals))
plt + geom_point() + geom_line(aes(y=yvals), color='red')
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
?chisq.test()
table(mpg$class,mpg$year)
table <- table(mpg$class,mpg$year)
chisq.test(table)
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
setwd("~/Desktop/Analysis_Projects/R_Analysis/Challenge")
setwd("~/Desktop/Analysis_Projects/R_Analysis/Challenge")
# Import the MechaCar mpg dataset
MechaCar_table <- read.csv(file = 'MechaCar_mpg.csv',check.names = T,stringsAsFactors = F)
View(MechaCar_table)
# Import Suspension_coil.csv
SuspensionCoil_table <- read.csv(file='Suspension_Coil.csv',check.names = T,stringsAsFactors = F)
View(SuspensionCoil_table)
ggplot(MechaCar_table,aes(x=mpg)) + geom_density()
#Import required tools and libraries
library(tidyverse)
#Check for distribution of mpg on MechCar dataset
ggplot(MechaCar_table,aes(x=mpg)) + geom_density()
shapiro.test(MechaCar_table$mpg)
cor(Mecha_matrix)
?as.matrix()
#Create a correlation matrix to viualize pearson correlation coefficent
Mecha_matrix <- data.matrix(MechaCar_table[,c("vehicle.length", "vehicle.weight", "spoiler.angle", "group.clearance","mpg")])
#Create a correlation matrix to viualize pearson correlation coefficent
Mecha_matrix <- data.matrix(MechaCar_table, rownames.force = NA)
cor(Mecha_matrix)
#Filter out AWD from the dataframe before running mult linear regress
#The input data must be numerical and continuous
filtered_Mecha <- MechaCar_table[MechaCar_table$vehicle.length & MechaCar_table$vehicle.weight & MechaCar_table$spoiler.angle &
MechaCar_table$ground.clearance & MechaCar_table$mpg]
#Filter out AWD from the dataframe before running mult linear regress
#The input data must be numerical and continuous
filtered_Mecha <- MechaCar_table[MechaCar_table$vehicle.length & MechaCar_table$vehicle.weight & MechaCar_table$spoiler.angle & MechaCar_table$ground.clearance & MechaCar_table$mpg]
#Filter out AWD from the dataframe before running mult linear regress
#The input data must be numerical and continuous
filtered_Mecha <- c("vehicle.length","vehicle.weight", "spoiler.angle", "ground.clearance", "mpg"]
MechaCar_table[filtered_Mecha]
#Filter out AWD from the dataframe before running mult linear regress
#The input data must be numerical and continuous
filtered_Mecha <- MechaCar_table(MechaCar_table$vehicle.length,MechaCar_table$vehicle.weight,MechaCar_table$spoiler.angle,MechaCar_table$ground.clearance,MechaCar_table$mpg]
MechaCar_table[filtered_Mecha]
#Filter out AWD from the dataframe before running mult linear regress
#The input data must be numerical and continuous
filtered_Mecha <- subset(MechaCar_table, select = -c(AWD))
View(filtered_Mecha)
#run mult linear regression
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance, data=filtered_Mecha)
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance, data=filtered_Mecha))
#Create summary stats table of suspension coil's lb/in continuous variable
#Check boxplots to visulize
plt <- ggplot(SuspensionCoil_table,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
summary(SuspensionCoil_table)
sapply(SuspensionCoil_table,var)
sapply(SuspensionCoil_table,var,na.rm=TRUE)
sapply(SuspensionCoil_table,var,median,na.rm=TRUE)
t.test(SuspensionCoil_table$PSI),mu=1500)
t.test(SuspensionCoil_table$PSI),mu=mean(1500)
t.test(SuspensionCoil_table$PSI,mu=mean(1500)
t.test(SuspensionCoil_table$PSI,mu=mean(1500))
t.test(log10(SuspensionCoil_table$PSI),mu=mean(log10(1500))
t.test(log10(SuspensionCoil_table$PSI),mu=mean(log10(1500))
?t.test()
t.test(SuspensionCoil_table$PSI,mu=1500)
shapiro.test(SuspensionCoil_table$PSI)
mean_sd(SuspensionCoil_table$PSI)
library(magrittr)
library(qwraps2)
mean_sd(SuspensionCoil_table$PSI)
sd(SuspensionCoil_table$PSI)
var(SuspensionCoil_table$PSI)
sd(SuspensionCoil_table$PSI)
library(magrittr)
var(SuspensionCoil_table$PSI)
mean(SuspensionCoil_table$PSI)
median(SuspensionCoil_table$PSI)
#Check boxplots to visulize
plt <- ggplot(SuspensionCoil_table,aes(x=Manufacturing_Lot,y=PSI))
#Create summary stats table of suspension coil's lb/in continuous variable
stats <- c(Standard_deviation, Mean, Median, Variance)
#Create summary stats table of suspension coil's lb/in continuous variable
stats <- c(Standard_Deviation, Mean, Median, Variance)
#Create summary stats table of suspension coil's lb/in continuous variable
stats <- c(Mean, Median, Variance)
#Create summary stats table of suspension coil's lb/in continuous variable
stats <- c("Mean", Median, Variance)
#Create summary stats table of suspension coil's lb/in continuous variable
stats <- c("Mean", "Median", "Variance", "Standard_Deviation")
stats_results <- c(1499.531,1499.747,76.23459,8.731242)
stats_table <- data.frame(stats, stats_results)
View(stats_table)
?rownames()
View(MechaCar_table)
